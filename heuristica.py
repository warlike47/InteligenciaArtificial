# -*- coding: utf-8 -*-
"""Heuristica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iuTGDw53zajpT0TBZDa7r1bHrgNFg7YF
"""

nodes = ["Start", "b6a7", "b6c7", "Cd5", "e3f4", "2N", "5N", "3N", "1N", "7N", "4N", "2 2N", "6N"]
edges = [["Start", "b6a7"], ["Start", "b6c7"], ["Start", "Cd5"], ["Start", "e3f4"],
        ["b6a7", "2N"], ["b6a7", "5N"],
        ["b6c7", "3N"], ["b6c7", "1N"],
        ["Cd5", "7N"],
        ["e3f4", "4N"], ["e3f4", "2 2N"], ["e3f4", "6N"]]

weights = [4, 2, 6, 1, 2, 5, 3, 1, 7, 4, 2, 6]


def childrens_node_start(name):
  nodosHijos = []

  for edge in edges:
    if edge[0] == name:
      nodosHijos.append(edge[1])

  return nodosHijos

def sub_edges_matrix(nodosHijos):
  matrix = []
  for nodo in nodosHijos:
    for edge in edges:
      if edge[0] == nodo:
        matrix.append(edge)
  return matrix

def less_number(numbers):
  value = numbers[0]
  for number in numbers:
    if number < value:
      value = number

  return value

def greater_number(numbers):
  value = numbers[0]
  for number in numbers:
    if number > value:
      value = number

  return value

def remove_number(numbers, numberToKeep):
  numeros = []
  for num in numbers:
    if num == numberToKeep:
      numeros.append(num)

  return numeros

def show_route(values):
  greaterNumber = greater_number(values)
  route = []
  index = 0
  
  for i in range(0, len(values)-1):
    if values[i] == greaterNumber:
      route.append(weights[i])

  route = remove_number(route, less_number(route))

  childrenEdges = []
  for node in childrens_node_start("Start"):
    if route[0] == weights[edges.index(["Start", node])]:
      for n in childrens_node_start(node):
        childrenEdges.append(weights[edges.index([node, n])])
  
  childrenEdges = remove_number(childrenEdges, greater_number(childrenEdges))

  route.append(childrenEdges[0])
  return route

def Heuristic_Search():
  
  diferences = []
  
  for node in childrens_node_start("Start"):
    value = weights[edges.index(["Start", node])]
    resto = []
    for n in childrens_node_start(node):
      number = value - weights[edges.index([node, n])]
      resto.append(number)

    diferences.append(less_number(resto))
    
  return show_route(diferences)
  
print(Heuristic_Search())